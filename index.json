[{"content":"背景 obsidian已经使用了一段时间（obsidian以下简称obs），但是obs主要用于知识管理，虽然可以构建成知识体系，但是比较零散，而博客可以将知识比较精华的地方浓缩，在写作的过程中可以整理思路，提高自己的表达能力。 在这样动力驱动下，我的诉求有以下几个：\n不想再开服务器或域名，而且主要是做记录，需要轻量化，故选择合适的博客 顺手的MD编辑器 可以所见即所得，在MD编辑后，可以直接将所见结果发布到GITHUB 技术选择 基于以上诉求，我分别选择了以下技术方案\nHugo做为轻量化博客框架 Github.io做为网页托管容器 Obsidian做为MD编辑器和交互中枢 Pico+Github 实现静态资源托管 Python实现触发任务开发 最后实现效果很像胡说的思路，但是胡说的实现思路比较依赖quickadd，我根据教程没有很好的实现开发，所以就自己基于Python做粘合，最后实现思路和胡说的结果类似，胡说的链接可以\r点击参考。 下文将详细介绍实现思路 具体实现思路 Hugo 本地部署与优化 这部分文档很多，我在这里从简写一下如果有人需要的话我可以单开一个，我的Hugo优化参考的是\rsulv的思路\n参考来源 安装包地址：\rhttps://github.com/gohugoio/hugo/releases\n根据自己的系统选择对应的安装包，这里还是以windows系统举例：\n但是hugo还有个extended版本，推荐直接安装这个版本，避免一些主题不支持基础版本。\n下载解压之后，因为不涉及hugo多次复用，所以不用麻烦去配置环境，直接用powershell 运行就好\n首先运行下述命令，可以看到自动生成了文件目录 ./hugo new site ./NewmanNya.github.io 然后可以将喜欢的主题替换到themes文件夹，在这里选的主题\rdemo可以参考 从github下载主题源码之后，放到thems可以修改下文件名称为stack 然后需要修改一下配置文件\n1 2 3 4 baseURL = \u0026#39;NewmanNya.github.io\u0026#39; languageCode = \u0026#39;zhcn\u0026#39; title = \u0026#39;NewmanNya\u0026#39; theme= \u0026#39;stack\u0026#39; 4.可以本地试运行一下，可以看到成功运行 ./hugo server Github.io 设置与托管 可以新建repository，命名为GitHub用户名+github.io 创建之后，可以先```\n1 git clone https://github.com/NewmanNya/NewmanNya.github.io.git 这样后续可以直接git提交，省的来回配置\n目录结构 目录结构如下，首先将整个Hugo做为vault被obs管理，然后使用git只提交public中的文件 静态资源托管 由于obs的wiki链接特性，和hugo的兼容性不是非常友好，试了若干方法，发现最好用的还是图床的形式，在这里使用的技术是PICO+Github，主打一个白嫖，具体配置链接可以参考这个网站 可以参考这个链接\nhomepage+button 在这里借鉴了\r胡说的思路，可以在运行后方便的看到目前博客的发布情况，另外做了三个按钮，可以分别实现新建+发布+本地渲染，其中结束环境因为python打包的exe权限不太够，可以手动关闭。 python开发button 启动环境 启动环境核心代码如下，主要就是执行了一个hugo server -D命令，然后就可以在127.0.0.1实时访问了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import json import os import subprocess # 读取参数 with open(\u0026#39;config.json\u0026#39;, \u0026#39;r\u0026#39;) as f: config_dir = json.load(f) # 1. 获取当前路径 blog_path = config_dir[\u0026#39;blog_path\u0026#39;] web_path = config_dir[\u0026#39;public_path\u0026#39;] git_path = os.path.join(web_path, \u0026#39;.git\u0026#39;) # 3. 运行hugo.exe进行编译 os.chdir(blog_path) hugo_path = os.path.join(blog_path, \u0026#34;hugo.exe\u0026#34;) try: # 执行 hugo -F --cleanDestinationDir 命令 result = subprocess.run([hugo_path,\u0026#39;server\u0026#39;,\u0026#39;-D\u0026#39;]) except subprocess.CalledProcessError as e: print(\u0026#34;Error running Hugo:\u0026#34;, e.stderr) 新建博客 新建博客脚本如下，首先读取config.json，然后调用hugo在content新建一个temp.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import json import os import subprocess # 读取参数 with open(\u0026#39;config.json\u0026#39;, \u0026#39;r\u0026#39;) as f: config_dir = json.load(f) # 1. 获取当前路径 blog_path = config_dir[\u0026#39;blog_path\u0026#39;] web_path = config_dir[\u0026#39;public_path\u0026#39;] git_path = os.path.join(web_path, \u0026#39;.git\u0026#39;) # 3. 运行hugo.exe进行编译 os.chdir(blog_path) hugo_path = os.path.join(blog_path, \u0026#34;hugo.exe\u0026#34;) try: # 执行 hugo -F --cleanDestinationDir 命令 result = subprocess.run([hugo_path,\u0026#39;new\u0026#39;,\u0026#39;temp.md\u0026#39;]) except subprocess.CalledProcessError as e: print(\u0026#34;Error running Hugo:\u0026#34;, e.stderr) 上传博客 本来的思路是每次上传前先备份public的git文件，然后再运行hugo -F \u0026ndash;cleanDestinationDir 命令 但是在实际测试的时候，因为权限不足，hugo没有足够权限清楚文件，因此改了思路，通过python手动移除非.git的文件，然后再重新生成 最后结果如下 可以同屏实时迭代更新本地的server渲染结果，使用起来很流畅 ","permalink":"https://newmannya.github.io/posts/tech/obsidian-hugo-python-git%E5%BB%BA%E7%AB%99/","summary":"背景 obsidian已经使用了一段时间（obsidian以下简称obs），但是obs主要用于知识管理，虽然可以构建成知识体系，但是比较零散，","title":"Obsidian Hugo Python Git建站"},{"content":"hello world 测试\n正文编辑\n写作规范\nobsidian的写作方法\n","permalink":"https://newmannya.github.io/posts/tech/helloworld/","summary":"hello world 测试 正文编辑 写作规范 obsidian的写作方法","title":"Hello world"},{"content":" ","permalink":"https://newmannya.github.io/about/","summary":"","title":"About"}]